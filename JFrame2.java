/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package blood.bank.donar.information.system;
import java.sql.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Selvapriya
 */
public class JFrame2 extends javax.swing.JFrame {

    /**
     * Creates new form JFrame2
     */
    public JFrame2() {
        initComponents();
        connect();
        //Table();
    }
      Connection con;
    PreparedStatement pst; 
    public void connect(){
        try {
Class.forName("org.postgresql.Driver"); 
 con = DriverManager.getConnection("jdbc:postgresql://localhost/Blood_Bank", "postgres", "Priya@14" ); 
         JOptionPane.showMessageDialog(this,"success");
        } 
            catch (ClassNotFoundException | SQLException e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Connection error: " + e.getMessage());
}
        
    }
/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        List = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Age", "Gender", "Blood_Group", "Address", "Mobile_Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        jButton1.setText("A1B+..");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("A2B+");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("B+");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("B-");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("O+");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("O-");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        List.setText("GetList");
        List.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListActionPerformed(evt);
            }
        });

        jButton7.setText("Login Page");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(26, 26, 26)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6)
                        .addGap(0, 131, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(List)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(List)
                    .addComponent(jButton7))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public void clearTable()
{
    DefaultTableModel dm = (DefaultTableModel)jTable1.getModel();
    dm.getDataVector().removeAllElements();
    revalidate();
}
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
     clearTable();
        try {
      
        pst = con.prepareStatement("SELECT * FROM donarlist where Blood_Group='A1B+'");
        ResultSet Rs = pst.executeQuery();
       
        
        //ResultSetMetaData RSMD = Rs.getMetaData();
        //int CC = RSMD.getColumnCount()
        //DFT.setRowCount(0);
        Object [] columnData=new Object[7];
         
        while(Rs.next()){
         columnData[0]=Rs.getString("Name");
         columnData[1]=Rs.getString("Age");
         columnData[2]=Rs.getString("Gender");
         columnData[3]=Rs.getString("Blood_Group");
         columnData[4]=Rs.getString("Address");
         columnData[5]=Rs.getString("Mobile_Number");
            model.addRow(columnData);
        }
   
        jTable1.setModel(model);
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
  DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
     clearTable();
        try {
      
        pst = con.prepareStatement("SELECT * FROM donarlist where Blood_Group='O+'");
        ResultSet Rs = pst.executeQuery();
       
        
        //ResultSetMetaData RSMD = Rs.getMetaData();
        //int CC = RSMD.getColumnCount()
        //DFT.setRowCount(0);
        Object [] columnData=new Object[7];
         
        while(Rs.next()){
         columnData[0]=Rs.getString("Name");
         columnData[1]=Rs.getString("Age");
         columnData[2]=Rs.getString("Gender");
         columnData[3]=Rs.getString("Blood_Group");
         columnData[4]=Rs.getString("Address");
         columnData[5]=Rs.getString("Mobile_Number");
            model.addRow(columnData);
        }
   
        jTable1.setModel(model);
    } catch (SQLException ex) {
        ex.printStackTrace();
    }       
    }//GEN-LAST:event_jButton5ActionPerformed

    private void ListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListActionPerformed
        clearTable();
        try {
      
        pst = con.prepareStatement("SELECT * FROM DonarList");
        ResultSet Rs = pst.executeQuery();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        //ResultSetMetaData RSMD = Rs.getMetaData();
        //int CC = RSMD.getColumnCount()
        //DFT.setRowCount(0);
        Object [] columnData=new Object[7];
         
        while(Rs.next()){
         columnData[0]=Rs.getString("Name");
         columnData[1]=Rs.getString("Age");
         columnData[2]=Rs.getString("Gender");
         columnData[3]=Rs.getString("Blood_Group");
         columnData[4]=Rs.getString("Address");
         columnData[5]=Rs.getString("Mobile_Number");
            model.addRow(columnData);
        }
   
        jTable1.setModel(model);
    } catch (SQLException ex) {
        ex.printStackTrace();
    }         
    }//GEN-LAST:event_ListActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
          DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
     clearTable();
        try {
      
        pst = con.prepareStatement("SELECT * FROM donarlist where Blood_Group='A2B+'");
        ResultSet Rs = pst.executeQuery();
       
        
        //ResultSetMetaData RSMD = Rs.getMetaData();
        //int CC = RSMD.getColumnCount()
        //DFT.setRowCount(0);
        Object [] columnData=new Object[7];
         
        while(Rs.next()){
         columnData[0]=Rs.getString("Name");
         columnData[1]=Rs.getString("Age");
         columnData[2]=Rs.getString("Gender");
         columnData[3]=Rs.getString("Blood_Group");
         columnData[4]=Rs.getString("Address");
         columnData[5]=Rs.getString("Mobile_Number");
            model.addRow(columnData);
        }
   
        jTable1.setModel(model);
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
    }//GEN-LAST:event_jButton2ActionPerformed
 
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
          DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
     clearTable();
        try {
      
        pst = con.prepareStatement("SELECT * FROM donarlist where blood_group='B+'");
        ResultSet Rs = pst.executeQuery();
       
        
        //ResultSetMetaData RSMD = Rs.getMetaData();
        //int CC = RSMD.getColumnCount()
        //DFT.setRowCount(0);
        Object [] columnData=new Object[7];
         
        while(Rs.next()){
         columnData[0]=Rs.getString("Name");
         columnData[1]=Rs.getString("Age");
         columnData[2]=Rs.getString("Gender");
         columnData[3]=Rs.getString("Blood_Group");
         columnData[4]=Rs.getString("Address");
         columnData[5]=Rs.getString("Mobile_Number");
            model.addRow(columnData);
        }
   
        jTable1.setModel(model);
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
     clearTable();
        try {
      
        pst = con.prepareStatement("SELECT * FROM donarlist where Blood_Group='B-'");
        ResultSet Rs = pst.executeQuery();
       
        
        //ResultSetMetaData RSMD = Rs.getMetaData();
        //int CC = RSMD.getColumnCount()
        //DFT.setRowCount(0);
        Object [] columnData=new Object[7];
         
        while(Rs.next()){
         columnData[0]=Rs.getString("Name");
         columnData[1]=Rs.getString("Age");
         columnData[2]=Rs.getString("Gender");
         columnData[3]=Rs.getString("Blood_Group");
         columnData[4]=Rs.getString("Address");
         columnData[5]=Rs.getString("Mobile_Number");
            model.addRow(columnData);
        }
   
        jTable1.setModel(model);
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
     clearTable();
        try {
      
        pst = con.prepareStatement("SELECT * FROM donarlist where Blood_Group='O-'");
        ResultSet Rs = pst.executeQuery();
       
        
        //ResultSetMetaData RSMD = Rs.getMetaData();
        //int CC = RSMD.getColumnCount()
        //DFT.setRowCount(0);
        Object [] columnData=new Object[7];
         
        while(Rs.next()){
         columnData[0]=Rs.getString("Name");
         columnData[1]=Rs.getString("Age");
         columnData[2]=Rs.getString("Gender");
         columnData[3]=Rs.getString("Blood_Group");
         columnData[4]=Rs.getString("Address");
         columnData[5]=Rs.getString("Mobile_Number");
            model.addRow(columnData);
        }
   
        jTable1.setModel(model);
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
       JFrame1 a=new JFrame1();
       a.setVisible(true);
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton List;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
